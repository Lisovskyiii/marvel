{"version":3,"file":"static/js/943.6f9245a3.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/CharSearchForm/CharSearchForm.js","components/pages/MainPage/index.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./charInfo.scss\";\nimport setContent from \"../../utils/setContent\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error: true };\r\n  }\r\n  componentDidCatch(error, errorinfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n    if (error) {\r\n      return <ErrorMessage></ErrorMessage>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport { ErrorBoundary };\r\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./CharSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../../randomChar/RandomChar\";\r\nimport CharList from \"../../charList/CharList\";\r\nimport CharInfo from \"../../charInfo/CharInfo\";\r\nimport { ErrorBoundary } from \"../../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../../CharSearchForm/CharSearchForm\";\r\n\r\nimport decoration from \"../../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, process, clearError, setProcess } = useHttp();\r\n\r\n  const _apiKey = \"apikey=f0f3fb2c26fc8c94303bfb52287e6835\";\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComic);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComic(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComic = (comic) => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      pageCount: comic.pageCount\r\n        ? `Page: ${comic.pageCount}`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n      description: comic.description || \"There is no description\",\r\n      language: comic.textObjects.language || \"en-us\",\r\n      prices: comic.prices[0].price\r\n        ? `${comic.prices[0].price}$`\r\n        : \"Not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"//skeleton\">\n        <div className=\"//pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","getDerivedStateFromError","componentDidCatch","errorinfo","this","setState","render","CharSearchForm","loading","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiKey","_apiBase","_transformCharacter","slice","path","extension","urls","_transformComic","comic","title","pageCount","language","textObjects","prices","price","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}